# NAME

Mojolicious::Plugin::LogDispatch - Mojolicious Plugin

# VERSION

This documentation describes version 0.01 of Mojolicious::Plugin::LogDispatch

# SYNOPSIS

    # Mojolicious application 
    # shorthand
    $self->plugin('LogDispatch');
    # longform
    $self->plugin('Mojolicious::Plugin::LogDispatch');
    # with config
    $self->plugin('Mojolicious::Plugin::LogDispatch', $config);

    # Mojolicious::Lite application
    # shorthand
    plugin 'LogDispatch';
    # longform
    plugin('Mojolicious::Plugin::LogDispatch');
    # with config
    plugin('Mojolicious::Plugin::LogDispatch', $config);

    # Mojo::Log compatibility
    $log->debug('How the helicopter did we get here?');
    $log->info('J.F.Y.I');
    $log->warn('What are you trying to do Dave?');
    $log->error('Do not divide by zero');
    $log->fatal('Unable to render error message');    
    
    # Log::Dispatch compatibility
    $log->notice ('J.F.Y.I');
    $log->warning('What are you trying to do Dave?');
    $log->critical('Do NOT divide by zero');
    $log->alert('Seriously! do NOT divide by zero');
    $log->emergency('Unable to render error message');

    # Syslog compatibility
    $log->err('Do not divide by zero'); #error
    $log->crit('Do NOT divide by zero'); #critical 
    $log->emerg('Unable to render error message'); #emergency

    # If you want to add additional logging configuration to your Mojolicious application
    my $config = $self->plugin('Config');
    $self->plugin('Mojolicious::Plugin::LogDispatch' => $config->{LogDispatch} // {} );

    my $log = Mojolicious::Plugin::LogDispatch->new();

    # Setting up logging using LogDispatch in your application's startup  method
    my $dispatch = Mojolicious::Plugin::LogDispatch->new(
        'path' => '/path/to/my/logfile.log',
        'remove_default_log_obj' => 0, # removes default initialized log handler
    );

    # Adding an additional logger, logging to syslog
    $dispatch->add(Log::Dispatch::Syslog->new(
        name      => 'logsys',
        min_level => 'info',
        ident     => 'MyMojo::App',
        facility  => 'local0'
    ));

    $self->log($dispatch);
     
    # and then
    $self->log->debug("Why isn't this working?");

    # will render (with the appropriate date)
    [Sun Jul 24 12:29:39 2016] [debug] Why isn't this working?

# DESCRIPTION

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) is a [Mojolicious](https://metacpan.org/pod/Mojolicious) plugin for [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) is derived from [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch), which was released
in the now deprecated Mojolicious plugin namespace. This distribution lifts the [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)
integration into the newer plugin namespace (see also MOTIVATION).

The component supports [Mojo::Log](https://metacpan.org/pod/Mojo::Log) methods and is there for compatible with the default 
Mojolicious logging mechanism and it attempts to mimick this if no special configuration is added. 
The component also exposes the Log::Dispatch methods for logging. 

[Mojolicious](https://metacpan.org/pod/Mojolicious) via [Mojo::Log](https://metacpan.org/pod/Mojo::Log) works with 5 log levels:

- debug
- info
- warn
- error
- fatal

Where Log::Dispatch works with 8 log levels, derived from Syslog.

- debug
- info
- notice
- warning
- error
- critical
- alert
- emergency

This mean that you can have higher differenciation on your logging statements using 
Log::Dispatch. The standard log levels from Mojolicious are mapped accordingly as 
depicted in the below figure:

| Mojo::Log | Log::Dispatch | Syslog  |
| --------- | ------------- | ------- |
|           | emergency     | emerg   |
|           | alert         | alert   |
| fatal     | critical      | crit    |
| error     | error         | err     |
| warn      | warning       | warning |
|           | notice        | notice  |
| info      | info          | info    |
| debug     | debug         | debug   |

# SUBROUTINES/METHODS

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) inherits all methods from
[Mojolicious::Plugin](https://metacpan.org/pod/Mojolicious::Plugin) and implements the following new ones.

In addition [Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) inherits from [Mojo::Log](https://metacpan.org/pod/Mojo::Log)

## add

## log

## log\_and\_croak

## log\_and\_die

## log\_to

## output

## remove

## would\_log

## register

    $plugin->register(Mojolicious->new);

Register plugin in [Mojolicious](https://metacpan.org/pod/Mojolicious) application.

This is a part of the [Mojolicious](https://metacpan.org/pod/Mojolicious) plugin API and it not used directly if you just want 
to use [Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) for logging.

## LOG METHODS

### debug

    $log->debug('How the helicopter did we get here?');

### info

    $log->info('J.F.Y.I');

### notice

    $log->notice ('J.F.Y.I');

### warning / warn

    $log->warning('What are you trying to do Dave?');

### error / err

    $log->err('Do not divide by zero');

### critical / crit

    $log->critical('Do NOT divide by zero');

### alert

    $log->alert('Seriously! do NOT divide by zero');

### fatal / emergency / emerg

    $log->emerg('Unable to render error message');

## LOG LEVEL METHODS

### level\_is\_valid

A method lifted from [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch) returns 

    $log->level_is_valid("PANIC!");

    $log->level_is_valid("DEFCON 5");

See also: [https://metacpan.org/pod/Log::Dispatch#dispatch-level\_is\_valid-string](https://metacpan.org/pod/Log::Dispatch#dispatch-level_is_valid-string)

### is\_alert

Returns true if the handler will log this level else false.

### is\_crit

Returns true if the handler will log this level else false.

### is\_critical

Returns true if the handler will log this level else false.

### is\_debug

Returns true if the handler will log this level else false.

### is\_emerg

Returns true if the handler will log this level else false.

### is\_emergency

Returns true if the handler will log this level else false.

### is\_err

Returns true if the handler will log this level else false.

### is\_error

Returns true if the handler will log this level else false.

### is\_fatal

Returns true if the handler will log this level else false.

### is\_info

Returns true if the handler will log this level else false.

### is\_notice

Returns true if the handler will log this level else false.

### is\_warn

Returns true if the handler will log this level else false.

### is\_warning

Returns true if the handler will log this level else false.

# COMPATIBILITY

## Mojo::Log

    # TODO

## Log::Dispatch

    # TODO

# INCOMPATIBILITIES

## MojoX::Log::Dispatch

    # TODO

# CONFIGURATION AND ENVIRONMENT

One of the great features of Mojolicious is it's ability to run with segregated 
configurations based on the mode in which the application is running.

If we would have an Mojolicious application with 5 supported methods:

- development
- test
- staging
- sandbox
- production

The example configurations could look like the following, please note the indication of 
the plugin for use in the configuration 'LogDipatch':

Example development configuration:

    # myapp.development.conf
    LogDispatch => {
        'Log::Dispatch::File' => {
            min_level => 'debug',
            newline => 1,
        },
    },

Example test configuration:

    # myapp.test.conf
    LogDispatch => {
        'Log::Dispatch::File' => {
            min_level => 'info',
            newline => 1,
        },
    },

Example staging configuration:

    # myapp.staging.conf
    LogDispatch => {
        'Log::Dispatch::File' => {
            min_level => 'info',
            newline   => 1,
        },
    },

Example sandbox configuration:

    # myapp.sandbox.conf
    LogDispatch => {
        'Log::Dispatch::Syslog' => {
            min_level => 'warn',
            newline   => 1,
            ident     => 'myapp',
            facility  => 'local0',
        },
        'Log::Dispatch::Email::MailSender' => {
            min_level => 'critical',
            newline   => 1,
            subject   => 'MyApp (sandbox)',
            from      => 'myapp+sandbox@mydomain.io',
            to        => [ 'operations@mydomain.io' ],
        },
    },

Example production configuration:

    # myapp.production.conf
    LogDispatch => {
        'Log::Dispatch::Syslog' => {
            min_level => 'warn',
            newline   => 1,
            ident     => 'myapp',
            facility  => 'local0',
        },
        'Log::Dispatch::Email::MailSender' => {
            min_level => 'critical',
            newline   => 1,
            subject   => 'MyApp (production)',
            from      => 'myapp+production@mydomain.io',
            to        => [ 'operations@mydomain.io' ],
        },
    },

# BUGS AND LIMITATIONS

    # TODO

# DIAGNOSTICS

## Can't locate X

This error is thrown if you have specified a Log::Dispatch::\* module, which is not installed.

Example:

    # Configuration
    'Log::Dispatch::Email::MailSender' => {
        min_level => 'critical',
        newline   => 1,
        subject   => 'MyApp (production)',
        from      => 'myapp+production@mydomain.io',
        to        => [ 'operations@mydomain.io' ],
    },

    # Error message
    Can't locate Mail/Sender.pm in @INC (you may need to install the Mail::Sender module)

### 

Remedy is to install the necessary module.

Please note that the [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch) distribution contains several loggers like [Log::Dispatch::File](https://metacpan.org/pod/Log::Dispatch::File), 
[Log::Dispatch::Screen](https://metacpan.org/pod/Log::Dispatch::Screen) and [Log::Dispatch::Syslog](https://metacpan.org/pod/Log::Dispatch::Syslog) and these do not require additional installation.

# DEPENDENCIES

- [Mojo::Base](https://metacpan.org/pod/Mojo::Base)
- [Mojolicious::Plugin](https://metacpan.org/pod/Mojolicious::Plugin)
- [Mojo::Log](https://metacpan.org/pod/Mojo::Log)
- [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)
- [Log::Dispatch::File](https://metacpan.org/pod/Log::Dispatch::File)
- [Log::Dispatch::Screen](https://metacpan.org/pod/Log::Dispatch::Screen)
- [DateTime](https://metacpan.org/pod/DateTime)

# TODO

Please see the issue list on Github for a complete list.

# SEE ALSO

- [Mojolicious](https://metacpan.org/pod/Mojolicious)
- [Mojolicious::Guides](https://metacpan.org/pod/Mojolicious::Guides)
- [http://mojolicio.us](http://mojolicio.us).
- [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)
- [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch)
- [https://en.wikipedia.org/wiki/Syslog](https://en.wikipedia.org/wiki/Syslog)

# MOTIVATION

The lack of support on [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch) resulted in this distribution. See [RT:91305](https://rt.cpan.org/Public/Bug/Display.html?id=91305)
for an example.

- Konstantin Kapitanov, (KAKADU), author of [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch), cool module and the base of this module
- Dave Rolsky (DROLSKY), author of [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)
- Sebastian Riedel (SRI) and the team behind [Mojolicious](https://metacpan.org/pod/Mojolicious)

# AUTHOR

Jonas B. Nielsen, (jonasbn) - `<jonasbn@cpan.org>`

# LICENSE AND COPYRIGHT

The implementation is derived from [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch) which is no longer 
actively supported

Mojolicious-Plugin-LogDispatch is (C) by Jonas B. Nielsen, (jonasbn) 2016

Mojolicious-Plugin-LogDispatch is released under the Artistic License 2.0

MojoX::Log::Dispatch is (C) by Konstantin Kapitanov, (kakadu) 2009 all rights reserved.

# POD ERRORS

Hey! **The above document had some coding errors, which are explained below:**

- Around line 481:

    Unknown directive: =head
