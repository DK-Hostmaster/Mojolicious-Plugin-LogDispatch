# NAME

Mojolicious::Plugin::LogDispatch - Mojolicious Plugin

# VERSION

0.01

# SYNOPSIS

    # Mojolicious using shorthand
    $self->plugin('LogDispatch');

    # Mojolicious using longform
    $self->plugin('Mojolicious::Plugin::LogDispatch');

    # Mojolicious::Lite using shorthand
    plugin 'LogDispatch';

    # Mojolicious::Lite using longform
    $self->plugin('Mojolicious::Plugin::LogDispatch');

    # Mojo::Log compatibility
    $log->debug('How the helicopter did we get here?');
    $log->info('J.F.Y.I');
    $log->warn('What are you trying to do Dave?');
    $log->error('Do not divide by zero');
    $log->fatal('Unable to render error message');    
    
    # Log::Dispatch compatibility
    $log->notice ('J.F.Y.I');
    $log->warning('What are you trying to do Dave?');
    $log->critical('Do NOT divide by zero');
    $log->alert('Seriously! do NOT divide by zero');
    $log->emergency('Unable to render error message');

    # Syslog compatibility
    $log->err('Do not divide by zero');
    $log->crit('Do NOT divide by zero');
    $log->emerg('Unable to render error message');

    # If you want to add additional logging configuration to your Mojolicious application
    my $config = $self->plugin('Config');
    $self->plugin('Mojolicious::Plugin::LogDispatch' => $config->{LogDispatch} // {} );

    my $log = Mojolicious::Plugin::LogDispatch->new();

    # Setting up logging using LogDispatch in your application's startup  method
    my $dispatch = Mojolicious::Plugin::LogDispatch->new(
        'path' => '/path/to/my/logfile.log',
        'remove_default_log_obj' => 0, # removes default initialized log handler
    );

    # Adding an additional logger, logging to syslog
    $dispatch->add(Log::Dispatch::Syslog->new(
        name      => 'logsys',
        min_level => 'debug',
        ident     => 'MyMojo::App',
        facility  => 'local0'
    ));

    $self->log($dispatch);
     
    #and then
    $self->log->debug("Why isn't this working?");  

# DESCRIPTION

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) is a [Mojolicious](https://metacpan.org/pod/Mojolicious) plugin for [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) is derived from [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch), which was released
in the now deprecated Mojolicious plugin namespace. This distribution lifts the Log::Dispatch 
integration into the newer plugin namespace (see also MOTIVATION).

The component supports Mojo::Log methods and is there for compatible with the default 
Mojolicious logging mechanism and it attempts to mimick this if no special configuration is added. 
The component also exposes the Log::Dispatch methods for logging. Mojolicious only works with 5 log levels:

- debug
- info
- warn
- error
- fatal

Where Log::Dispatch works with 8, derived from Syslog.

- debug
- info
- notice
- warning
- error
- critical
- alert
- emergency

This mean that you can have higher differenciation on your logging statements using 
Log::Dispatch. The standard log levels from Mojolicious are mapped accordingly as 
depicted in the below figure:

| Mojo::Log | Log::Dispatch | Syslog  |
| --------- | ------------- | ------- |
|           | emergency     | emerg   |
|           | alert         | alert   |
| fatal     | critical      | crit    |
| error     | error         | err     |
| warn      | warning       | warning |
|           | notice        | notice  |
| info      | info          | info    |
| debug     | debug         | debug   |

Mojolicious::Plugin::LogDispatch

# SUBROUTINES/METHODS

[Mojolicious::Plugin::LogDispatch](https://metacpan.org/pod/Mojolicious::Plugin::LogDispatch) inherits all methods from
[Mojolicious::Plugin](https://metacpan.org/pod/Mojolicious::Plugin) and implements the following new ones.

## register

    $plugin->register(Mojolicious->new);

Register plugin in [Mojolicious](https://metacpan.org/pod/Mojolicious) application.

## debug

    $log->debug('How the helicopter did we get here?');

## info

    $log->info('J.F.Y.I');

## notice

    $log->notice ('J.F.Y.I');

## warning / warn

    $log->warning('What are you trying to do Dave?');

## error / err

    $log->err('Do not divide by zero');

## critical / crit

    $log->critical('Do NOT divide by zero');

## alert

    $log->alert('Seriously! do NOT divide by zero');

## fatal / emergency / emerg

    $log->emerg('Unable to render error message');

## add

## dispatcher

## is\_alert

## is\_crit

## is\_critical

## is\_debug

## is\_emerg

## is\_emergency

## is\_err

## is\_error

## is\_fatal

## is\_info

## is\_notice

## is\_warn

## is\_warning

## level\_is\_valid

## log

## log\_and\_croak

## log\_and\_die

## log\_to

## output

## remove

## would\_log

# COMPATIBILITY

## Mojo::Log

## MojoX::Log::Dispatch

# INCOMPATIBILITIES

# CONFIGURATION AND ENVIRONMENT

One of the great features of Mojolicious is it's ability to run with segregated 
configurations based on the mode in which the application is running.

If we would have an Mojolicious application with 5 supported methods:

- development

    # myapp.development.conf
    LogDispatch => {
        file => {
            min_level => 'debug',
            newline => 1,
        },
    },

    # myapp.test.conf
    LogDispatch => {
        file => {
            min_level => 'info',
            newline => 1,
        },
    },

    # myapp.staging.conf
    LogDispatch => {
        file => {
            min_level => 'info',
            newline   => 1,
        },
    },

    # myapp.sandbox.conf
    LogDispatch => {
        Syslog => {
            min_level => 'warn',
            newline   => 1,
            ident     => 'myapp',
            facility  => 'local0',
        },
        'Log::Dispatch::Email::MailSender' => {
            min_level => 'critical',
            newline   => 1,
            subject   => 'MyApp (sandbox)',
            from      => 'myapp+sandbox@mydomain.io',
            to        => [ 'operations@mydomain.io' ],
        },
    },

    # myapp.production.conf
    LogDispatch => {
        Syslog => {
            min_level => 'warn',
            newline   => 1,
            ident     => 'myapp',
            facility  => 'local0',
        },
        'Log::Dispatch::Email::MailSender' => {
            min_level => 'critical',
            newline   => 1,
            subject   => 'MyApp (production)',
            from      => 'myapp+production@mydomain.io',
            to        => [ 'operations@mydomain.io' ],
        },
    },

# BUGS AND LIMITATIONS

# DIAGNOSTICS

# DEPENDENCIES

# SEE ALSO

- [Mojolicious](https://metacpan.org/pod/Mojolicious)
- [Mojolicious::Guides](https://metacpan.org/pod/Mojolicious::Guides)
- [http://mojolicio.us](http://mojolicio.us).
- [Log::Dispatch](https://metacpan.org/pod/Log::Dispatch)
- [MojoX::Log::Dispatch](https://metacpan.org/pod/MojoX::Log::Dispatch)
- [https://en.wikipedia.org/wiki/Syslog](https://en.wikipedia.org/wiki/Syslog)

# MOTIVATION

The lack of support on MojoX::Log::Dispatch resulted in this distribution.

# AUTHOR

Jonas B. Nielsen, (jonasbn) - `<jonasbn@cpan.org>`

# LICENSE AND COPYRIGHT

The implementation is derived from MojoX::Log::Dispatch which is no longer 
supported

Mojolicious-Plugin-LogDispatch is (C) by Jonas B. Nielsen, (jonasbn) 2016

Mojolicious-Plugin-LogDispatch is released under the Artistic License 2.0

MojoX::Log::Dispatch is (C) by Konstantin Kapitanov, (kakadu) 2009 all rights reserved.
